#!/usr/bin/env bash

CONF_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/rclone-sync"
FILTER_FILE="${XDG_CONFIG_HOME:=$HOME/.config}/rclone-sync/filters"
REMOTE="proton"
SOURCE="${HOME}"

log() {
  local flag="$1"
  local message="$2"

  if command -v notify-send >/dev/null 2>&1; then
    if [[ "${flag}" == '1' ]]; then
      notify-send --urgency normal 'Rclone Sync' "${message}"
    elif [[ "${flag}" == '2' ]]; then
      notify-send --urgency critical 'Rclone Sync' "${message}"
    fi
  fi

  echo "$message"
}

inf() { log '1' "INFO: $*"; }
warn() { log '1' "WARN: $*" >&2; }
err() { log '2' "ERROR: $*" >&2; }

check_expected_dirs() {
  local expected_dirs="${CONF_DIR}/expected_dirs"

  if [[ -f "${expected_dirs}" ]]; then

    while IFS= read -r line; do
      local directory=${line//[[:space:]]/}

      if [[ -z ${directory} ]]; then
        continue
      fi

      if [[ ! -d "${directory}" ]]; then
        err "Expected directory ${directory} doesn't exists."
        return 1
      fi
    done <"${expected_dirs}"

  fi
}

check_rclone_setup() {
  if ! command -v rclone >/dev/null; then
    err "Rclone package missing"
    return 1
  fi

  if ! grep --quiet "${REMOTE}" <<<"$(rclone listremotes)"; then
    err "Remote ${REMOTE} hasn't been configured yet"
    return 1
  fi

  if [[ ! -f "${FILTER_FILE}" ]]; then
    err "No filter file found at ${FILTER_FILE}"
    return 1
  fi
}

main() {
  if ! check_rclone_setup; then
    exit 1
  fi

  if ! check_expected_dirs; then
    exit 1
  fi

  if ! packages-backup; then
    warn "Failed to run packages-backup, skipping"
  fi

  inf "Starting Rclone sync"

  if rclone sync --check-first --log-level INFO --filter-from "${FILTER_FILE}" "${SOURCE}" "${REMOTE}:"; then
    inf "Rclone sync finished succesfully"
  fi
}

main
